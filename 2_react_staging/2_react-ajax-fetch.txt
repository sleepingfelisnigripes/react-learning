1. 前置说明: 
        1. React本身只关注于界面，并不包含发送ajax请求的代码
        2. 前端应用需要通过ajax请求与后台进行交互(json数据)
        2. react应用需要集成第三方ajax库或自己封装

2. 常用的ajax请求库

        1. jQuery: 比较重，如果需要另外引入，不建议使用
        2. axios: 轻量级，建议使用
            1）封装XmlHttpRequest对象的ajax
            2）promise风格
            3）可以用在浏览器和node服务器端

yarn add axios 安装axios

3. react脚手架配置代理
        方法一：
                在packag.json中追加如下配置：
                "proxy":"http://localhost:5000"
                说明：
                    1.优点: 配置简单，前端请求资源时可以不加任何前缀
                    2.缺点: 不能配置多个代理
                    3.上述方式配置代理，当请求了3000不存在的资源时, 那么该请求会转发给5000(优先匹配前端资源)
                
        方法二：
                第一步：创建代理文件
                        在src下创建配置文件: src/setupProxy.js (不能改名)
                第二步：编写setupProxy.js配置具体代理规则
                        const {createProxyMiddleware } = require('http-proxy-middleware');
                        module.exports = function (app) {
                        app.use(
                                createProxyMiddleware ('/api1', {     //api1是需要转发的请求(所有带有/api1前缀的请求都会转发给5001)
                                target: 'http://localhost:5001',      //配置转发目标地址(能返回数据的服务器地址)
                                changeOrigin: true,                   //控制服务器接收到的请求头中Host字段的值
                                /*
                                    changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5001
                                    changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:3000
                                    changeOrigin默认值为false，但我们一般将changeOrigin值设为true
                                */
                                pathRewrite: {'^/api1': ''}           //去除请求前缀，保证交给后台服务器的是正常请求地址(必须配置)
                                }),
                                createProxyMiddleware ('/api2', {
                                target: 'http://localhost:5002',
                                changeOrigin: true,
                                pathRewrite: {'^/api2': ''}
                                })
                        )
                        }
                
                说明：
                    1.优点：可以配置多个代理，可以灵活的控制请求是否走代理
                    2.缺点：配置繁琐，前端请求资源时必须加前缀


4. 发送ajax请求有几种方式？可以用哪些东西发出一个ajax请求呢？
        xhr  jQuery  
             axios(promiss风格的)

        其中jQuery和axios都是对xhr的封装
        
        另一个是内置的fetch 和xhr并列，fetch不用安装
    
    fetch：
        原生函数，不再使用XmlHttpRequest对象提交ajax请求
        老版本可能不支持
        
5. github搜索案例相关知识点
        1. 设计状态时要考虑全面，例如带有网络请求的组件，要考虑请求失败怎么办。
        2. ES6小知识点：解构赋值+重命名
                let obj = {a:{b:1}} 
                const {a} = obj; //传统解构赋值
                const {a:{b}} = obj //连续解构赋值
                const {a:{b:value}} = obj //连续解构赋值+重命名
        3. 消息订阅与发布机制
                1. 先订阅，再发送
                2. 适用于任意组件间的通信
                3. 要在组件的componentWillUmount中取消订阅
        4. fetch发送请求(关注分离的设计思想)
                try {
                    const response = await fetch('/api/search/user2?q=${keyword}')
                    const data = await response.json()
                    console.log(data);
                } catch (error) {
                        console.log('请求出错',error)
                }

